name: Demo API Server CI/CD with Docker

# 워크플로우가 실행될 조건: main 브랜치에 push 이벤트가 발생했을 때
on:
  push:
    branches: [ "main" ]

jobs:
  # 빌드 및 Docker 이미지 푸시 작업
  build-and-push:
    runs-on: ubuntu-latest # 작업이 실행될 가상 환경
    steps:
      # 1. 레포지토리 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. JDK 17 설치
      # 프로젝트의 Java 버전에 맞게 수정해주세요 (예: '11', '21')
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. gradlew 실행 권한 추가
      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # 4. Gradle로 빌드
      # 이 명령은 프로젝트를 빌드하고 테스트를 실행한 뒤, 실행 가능한 JAR 파일을 생성합니다.
      - name: Build with Gradle
        run: ./gradlew build

      # 5. Docker Hub 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 6. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          # 이미지 태그 설정: DockerHubID/레포지토리이름:latest
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest

  # EC2에 배포하는 작업
  deploy:
    needs: build-and-push # build-and-push 작업이 성공해야 실행됩니다.
    runs-on: ubuntu-latest
    steps:
      # 1. SSH를 통해 EC2에 접속하여 배포 스크립트 실행
      - name: Deploy to EC2 instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Docker Hub에서 최신 이미지를 pull 받습니다.
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest
            
            # 기존에 실행 중이던 컨테이너를 중지하고 삭제합니다.
            # || true는 해당 이름의 컨테이너가 없을 때 오류가 발생하는 것을 방지합니다.
            sudo docker stop ${{ github.event.repository.name }} || true
            sudo docker rm ${{ github.event.repository.name }} || true
            
            # 새로운 이미지로 컨테이너를 실행합니다.
            # 필요에 따라 포트 번호(-p 8080:8080)나 다른 옵션을 추가해주세요.
            sudo docker run -d --name ${{ github.event.repository.name }} ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:latest